<!DOCTYPE html>
<html>
  <head lang="en">
    <meta charset="utf-8" />
    <link rel="icon" type="image/png" href="/images/favicon.ico">
	  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    
    <!-- Update the template title -->
    <title><%=typeof title == 'undefined' ? 'Sprint Report' : title %></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0' name='viewport' />
    <meta name="viewport" content="width=device-width" />


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/third-party/bootstrap.min.css">
    <link rel="stylesheet" href="/styles/third-party/animate.min.css">
    <link rel="stylesheet" href="/styles/third-party/bootstrap-tagsinput.css">
    <link rel="stylesheet" href="/styles/third-party/light-bootstrap-dashboard.css">
    <link rel="stylesheet" href="/styles/third-party/pe-icon-7-stroke.css">
    <link rel="stylesheet" href="/styles/third-party/styles.css">
    <link rel="stylesheet" href="/styles/third-party/tokenfield-typeahead.css">
    <!--STYLES END-->
    
    
    <!-- External Style Sheets -->
    <link href="http://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css" rel="stylesheet">
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,700,300' rel='stylesheet' type='text/css'>
    <!-- External Style Sheets End -->
    
    

    
    
  </head>

  <body>
    
    <div class="wrapper">
      <%- partial('./static/sidebar') %>
      <%- partial('./static/mainpanel') %>
      
        <div class="content">
          <div class="container-fluid">
            <div class="row">
              <%- body %>
            </div>
          </div>
        </div>
        
        <%- partial('./static/footer') %>
        
    </div> <!-- end wrapper -->
      

    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/jquery.min.js"></script>
    <script src="/js/dependencies/jquery-ui.min.js"></script>
    <script src="/js/dependencies/jquery.validate.min.js"></script>
    <script src="/js/third-party/bootstrap.min.js"></script>
    <script src="/js/third-party/moment.min.js"></script>
    <script src="/js/third-party/bootstrap-checkbox-radio-switch.js"></script>
    <script src="/js/third-party/chartist.min.js"></script>
    <script src="/js/third-party/bootstrap-notify.js"></script>
    <script src="/js/login/light-bootstrap-dashboard.js"></script>
    <script src="/js/third-party/bootstrap-typeahead.js"></script>
    <script src="/js/third-party/bootstrap-table.js"></script>
    <script src="/js/third-party/bootstrap-datetimepicker.js"></script>
    <script src="/js/third-party/bootstrap-selectpicker.js"></script>
    <script src="/js/third-party/bootstrap-tokenfield.js"></script>
    <!--SCRIPTS END-->
    
    <!-- VIEW SCRIPTS -->
    <% 
    if(scripts) { 
       for(i=0; i<scripts.length; i++) {   
    %>
    <script src="/js/standalone/<%= scripts[i] %>"></script>
    <% }
    } %>
    <!-- VIEW SCRIPTS END -->
    
  </body>
</html>
